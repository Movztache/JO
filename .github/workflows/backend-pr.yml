# ============================================================================
# PIPELINE CI GITHUB ACTIONS - PULL REQUESTS BACKEND VIBE-TICKETS
# ============================================================================
#
# Ce pipeline s'ex√©cute sur les Pull Requests pour valider les changements
# avant leur int√©gration dans la branche principale.
#
# OBJECTIFS :
# - Validation rapide des changements propos√©s
# - Tests de non-r√©gression
# - V√©rification de la qualit√© du code
# - Build et tests Docker sans d√©ploiement
# - Feedback rapide aux d√©veloppeurs
#
# DIFF√âRENCES AVEC LE PIPELINE PRINCIPAL :
# - Pas de d√©ploiement AWS
# - Pas de push vers ECR
# - Focus sur la validation et les tests
# - Ex√©cution plus rapide
#
# ============================================================================

name: üîç Backend PR Validation

# ============================================================================
# CONFIGURATION DES D√âCLENCHEURS
# ============================================================================
on:
  # D√©clenchement sur Pull Requests vers main
  pull_request:
    branches: 
      - main
      - develop
    # Filtrer uniquement les changements affectant le backend
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/backend-*.yml'

  # D√©clenchement sur les mises √† jour de PR
  pull_request_target:
    types: [synchronize, reopened]
    branches: 
      - main
      - develop

# ============================================================================
# VARIABLES D'ENVIRONNEMENT
# ============================================================================
env:
  # Configuration Java et Maven
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m -XX:MaxPermSize=256m'
  
  # Configuration Docker
  DOCKER_BUILDKIT: 1

# ============================================================================
# D√âFINITION DES JOBS
# ============================================================================
jobs:
  # ==========================================================================
  # JOB 1: VALIDATION RAPIDE DU CODE
  # ==========================================================================
  quick-validation:
    name: ‚ö° Validation Rapide
    runs-on: ubuntu-latest
    
    steps:
      # ----------------------------------------------------------------------
      # √âTAPE 1: R√©cup√©ration du code source
      # ----------------------------------------------------------------------
      - name: üì• Checkout du code source
        uses: actions/checkout@v4
        with:
          # Pour les PR externes, utiliser le code de la PR
          ref: ${{ github.event.pull_request.head.sha }}

      # ----------------------------------------------------------------------
      # √âTAPE 2: Configuration de Java
      # ----------------------------------------------------------------------
      - name: ‚òï Configuration de Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'eclipse-temurin'

      # ----------------------------------------------------------------------
      # √âTAPE 3: Cache Maven
      # ----------------------------------------------------------------------
      - name: üì¶ Cache des d√©pendances Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-pr-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-pr-
            ${{ runner.os }}-maven-

      # ----------------------------------------------------------------------
      # √âTAPE 4: Validation et compilation rapide
      # ----------------------------------------------------------------------
      - name: üîç Validation du projet
        run: |
          echo "üîç Validation de la structure du projet..."
          mvn validate -q
          
          echo "üèóÔ∏è Compilation rapide..."
          mvn compile -B -q
          
          echo "‚úÖ Validation et compilation r√©ussies"

  # ==========================================================================
  # JOB 2: TESTS COMPLETS
  # ==========================================================================
  comprehensive-tests:
    name: üß™ Tests Complets
    runs-on: ubuntu-latest
    needs: quick-validation
    
    # Configuration des services pour les tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: vibe_tickets_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # ----------------------------------------------------------------------
      # √âTAPE 1: R√©cup√©ration du code source
      # ----------------------------------------------------------------------
      - name: üì• Checkout du code source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # ----------------------------------------------------------------------
      # √âTAPE 2: Configuration de Java
      # ----------------------------------------------------------------------
      - name: ‚òï Configuration de Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'eclipse-temurin'

      # ----------------------------------------------------------------------
      # √âTAPE 3: Cache Maven
      # ----------------------------------------------------------------------
      - name: üì¶ Cache des d√©pendances Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-pr-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-pr-
            ${{ runner.os }}-maven-

      # ----------------------------------------------------------------------
      # √âTAPE 4: Ex√©cution des tests
      # ----------------------------------------------------------------------
      - name: üß™ Tests unitaires et d'int√©gration
        run: |
          echo "üß™ Ex√©cution de tous les tests..."
          mvn clean test -B
          
          echo "üìä G√©n√©ration du rapport de couverture..."
          mvn jacoco:report
          
          echo "‚úÖ Tests termin√©s avec succ√®s"
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/vibe_tickets_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_password

      # ----------------------------------------------------------------------
      # √âTAPE 5: Analyse de la couverture de code
      # ----------------------------------------------------------------------
      - name: üìä Analyse de la couverture de code
        run: |
          echo "üìä Analyse de la couverture de code..."
          
          # V√©rification que le rapport existe
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "‚úÖ Rapport de couverture g√©n√©r√©"
            
            # Extraction des m√©triques de couverture (si possible)
            if command -v xmllint &> /dev/null && [ -f "target/site/jacoco/jacoco.xml" ]; then
              COVERAGE=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "N/A")
              TOTAL=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "N/A")
              
              if [[ "$COVERAGE" != "N/A" && "$TOTAL" != "N/A" ]]; then
                PERCENTAGE=$(echo "scale=2; $COVERAGE / ($COVERAGE + $TOTAL) * 100" | bc -l 2>/dev/null || echo "N/A")
                echo "üìä Couverture de code: ${PERCENTAGE}%"
              fi
            fi
          else
            echo "‚ö†Ô∏è Rapport de couverture non trouv√©"
          fi

      # ----------------------------------------------------------------------
      # √âTAPE 6: Upload des rapports de tests
      # ----------------------------------------------------------------------
      - name: üì§ Upload des rapports de tests
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pr-test-reports-${{ github.event.pull_request.number }}
          path: |
            target/surefire-reports/
            target/site/jacoco/
          retention-days: 7

  # ==========================================================================
  # JOB 3: BUILD ET VALIDATION DOCKER
  # ==========================================================================
  docker-validation:
    name: üê≥ Validation Docker
    runs-on: ubuntu-latest
    needs: quick-validation

    steps:
      # ----------------------------------------------------------------------
      # √âTAPE 1: R√©cup√©ration du code source
      # ----------------------------------------------------------------------
      - name: üì• Checkout du code source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # ----------------------------------------------------------------------
      # √âTAPE 2: Configuration de Java pour le build
      # ----------------------------------------------------------------------
      - name: ‚òï Configuration de Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'eclipse-temurin'

      # ----------------------------------------------------------------------
      # √âTAPE 3: Build de l'application
      # ----------------------------------------------------------------------
      - name: üì¶ Build de l'application
        run: |
          echo "üì¶ Build de l'application pour Docker..."
          mvn clean package -DskipTests -B -q
          
          echo "‚úÖ Build termin√©"

      # ----------------------------------------------------------------------
      # √âTAPE 4: Configuration de Docker Buildx
      # ----------------------------------------------------------------------
      - name: üîß Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ----------------------------------------------------------------------
      # √âTAPE 5: Build et test de l'image Docker
      # ----------------------------------------------------------------------
      - name: üê≥ Build et test de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: vibe-tickets:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ----------------------------------------------------------------------
      # √âTAPE 6: Test de l'image Docker
      # ----------------------------------------------------------------------
      - name: üß™ Test de l'image Docker
        run: |
          echo "üß™ Test de l'image Docker..."
          
          # D√©marrage du conteneur en mode test
          docker run -d --name test-container \
            -e SPRING_PROFILES_ACTIVE=test \
            -p 8080:8080 \
            vibe-tickets:pr-${{ github.event.pull_request.number }}
          
          # Attendre que l'application d√©marre
          echo "‚è≥ Attente du d√©marrage de l'application..."
          for i in {1..12}; do
            if docker exec test-container curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "‚úÖ Application d√©marr√©e dans le conteneur"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "‚ùå L'application n'a pas d√©marr√© dans les temps"
              docker logs test-container
              exit 1
            fi
            
            sleep 5
          done
          
          # Nettoyage
          docker stop test-container
          docker rm test-container
          
          echo "‚úÖ Test Docker r√©ussi"

  # ==========================================================================
  # JOB 4: COMMENTAIRE DE R√âSUM√â SUR LA PR
  # ==========================================================================
  pr-comment:
    name: üí¨ Commentaire PR
    runs-on: ubuntu-latest
    needs: [quick-validation, comprehensive-tests, docker-validation]
    if: always()

    steps:
      # ----------------------------------------------------------------------
      # √âTAPE 1: Pr√©paration du commentaire
      # ----------------------------------------------------------------------
      - name: üìù Pr√©paration du commentaire PR
        id: comment
        run: |
          # D√©termination du statut global
          if [[ "${{ needs.quick-validation.result }}" == "success" && 
                "${{ needs.comprehensive-tests.result }}" == "success" && 
                "${{ needs.docker-validation.result }}" == "success" ]]; then
            STATUS="‚úÖ Tous les checks sont pass√©s"
            EMOJI="üéâ"
          else
            STATUS="‚ùå Certains checks ont √©chou√©"
            EMOJI="‚ö†Ô∏è"
          fi
          
          # Construction du commentaire
          cat > comment.md << EOF
          ## ${EMOJI} R√©sultat de la validation PR #${{ github.event.pull_request.number }}
          
          **Statut global**: ${STATUS}
          
          ### üìä D√©tail des validations
          
          | Check | Statut | Description |
          |-------|--------|-------------|
          | Validation rapide | ${{ needs.quick-validation.result == 'success' && '‚úÖ Succ√®s' || '‚ùå √âchec' }} | Compilation et validation de base |
          | Tests complets | ${{ needs.comprehensive-tests.result == 'success' && '‚úÖ Succ√®s' || '‚ùå √âchec' }} | Tests unitaires et d'int√©gration |
          | Validation Docker | ${{ needs.docker-validation.result == 'success' && '‚úÖ Succ√®s' || '‚ùå √âchec' }} | Build et test de l'image Docker |
          
          ### üîó Liens utiles
          - [D√©tails du workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Rapports de tests](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
          
          ---
          *Validation automatique via GitHub Actions*
          EOF
          
          echo "comment-file=comment.md" >> $GITHUB_OUTPUT

      # ----------------------------------------------------------------------
      # √âTAPE 2: Publication du commentaire
      # ----------------------------------------------------------------------
      - name: üí¨ Publication du commentaire PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('${{ steps.comment.outputs.comment-file }}', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

# ============================================================================
# CONFIGURATION DES PERMISSIONS
# ============================================================================
permissions:
  contents: read
  pull-requests: write
  checks: write
